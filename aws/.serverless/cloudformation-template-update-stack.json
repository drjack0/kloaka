{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "OrganizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-kloaka-dev-organizer"
      }
    },
    "GetDeviceStatLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-kloaka-dev-getDeviceStat"
      }
    },
    "GetAllDevicesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/backend-kloaka-dev-getAllDevices"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "backend-kloaka",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-kloaka-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-kloaka-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:815814454771:table/*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "backend-kloaka",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "OrganizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/backend-kloaka/dev/1620943854445-2021-05-13T22:10:54.445Z/organizer.zip"
        },
        "Handler": "src/organizer.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "backend-kloaka-dev-organizer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TableA": "Kloaka-Zone-A",
            "TableB": "Kloaka-Zone-B",
            "TableC": "Kloaka-Zone-C"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "OrganizerLogGroup"
      ]
    },
    "GetDeviceStatLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/backend-kloaka/dev/1620943854445-2021-05-13T22:10:54.445Z/getDeviceStat.zip"
        },
        "Handler": "src/rest.getDeviceStat",
        "Runtime": "nodejs12.x",
        "FunctionName": "backend-kloaka-dev-getDeviceStat",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TableA": "Kloaka-Zone-A",
            "TableB": "Kloaka-Zone-B",
            "TableC": "Kloaka-Zone-C"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetDeviceStatLogGroup"
      ]
    },
    "GetAllDevicesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/backend-kloaka/dev/1620943854445-2021-05-13T22:10:54.445Z/getAllDevices.zip"
        },
        "Handler": "src/rest.getAllDevices",
        "Runtime": "nodejs12.x",
        "FunctionName": "backend-kloaka-dev-getAllDevices",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TableA": "Kloaka-Zone-A",
            "TableB": "Kloaka-Zone-B",
            "TableC": "Kloaka-Zone-C"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllDevicesLogGroup"
      ]
    },
    "OrganizerLambdaVersionXCqbP2fkdkaXQQBjKULsyvhfafQQSv2YJX83oJl4Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "OrganizerLambdaFunction"
        },
        "CodeSha256": "ljx6ciN0JNcgItG4zGcyfQ0n4xz+o4wvqxa5LS0KWHc="
      }
    },
    "GetAllDevicesLambdaVersionFHPuUhkOC1LFQd5aqmTRDPAsU59RovDICxWYM2Y4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllDevicesLambdaFunction"
        },
        "CodeSha256": "ljx6ciN0JNcgItG4zGcyfQ0n4xz+o4wvqxa5LS0KWHc="
      }
    },
    "GetDeviceStatLambdaVersion4UxSdI3zhZNcVmy3ncJnA8NflbWsvVNvAcLXiXNpNvg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDeviceStatLambdaFunction"
        },
        "CodeSha256": "ljx6ciN0JNcgItG4zGcyfQ0n4xz+o4wvqxa5LS0KWHc="
      }
    },
    "OrganizerIotTopicRule1": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "TopicRulePayload": {
          "RuleDisabled": false,
          "Sql": "SELECT * FROM 'kloaka_from_device'",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "OrganizerLambdaFunction",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "Description": "KLOAKA - Message organizer and formatter. This rule gets messages posted on 'from_device' topic and put them in the relative zone DynamoDB Table"
        },
        "RuleName": "kloaka_organizer"
      }
    },
    "OrganizerLambdaPermissionIotTopicRule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "OrganizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "iot.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":iot:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":rule/",
              {
                "Ref": "OrganizerIotTopicRule1"
              }
            ]
          ]
        }
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-backend-kloaka",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "GetDeviceStatLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDeviceStatLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetDeviceStat": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetDeviceStatLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRouteGetDeviceIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /device/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetDeviceStat"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetDeviceStat"
    },
    "GetAllDevicesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllDevicesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllDevices": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllDevicesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRouteGetDeviceScan": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /device/scan",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllDevices"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllDevices"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-backend-kloaka-dev-ServerlessDeploymentBucketName"
      }
    },
    "OrganizerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "OrganizerLambdaVersionXCqbP2fkdkaXQQBjKULsyvhfafQQSv2YJX83oJl4Y"
      },
      "Export": {
        "Name": "sls-backend-kloaka-dev-OrganizerLambdaFunctionQualifiedArn"
      }
    },
    "GetAllDevicesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllDevicesLambdaVersionFHPuUhkOC1LFQd5aqmTRDPAsU59RovDICxWYM2Y4"
      },
      "Export": {
        "Name": "sls-backend-kloaka-dev-GetAllDevicesLambdaFunctionQualifiedArn"
      }
    },
    "GetDeviceStatLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDeviceStatLambdaVersion4UxSdI3zhZNcVmy3ncJnA8NflbWsvVNvAcLXiXNpNvg"
      },
      "Export": {
        "Name": "sls-backend-kloaka-dev-GetDeviceStatLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-backend-kloaka-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-backend-kloaka-dev-HttpApiUrl"
      }
    }
  }
}